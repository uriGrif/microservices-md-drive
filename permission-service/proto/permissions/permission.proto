syntax = "proto3";

import "google/api/annotations.proto";

option go_package = "/protogen/golang/permissions";

// Enum for permission levels
enum PermissionLevel {
    OWNER = 0;
    EDITOR = 1;
    VIEWER = 2;
}

// Message representing a permission entry
message Permission {
    string file_id = 1 [json_name = "fileId"];
    string user_id = 2 [json_name = "userId"];
    PermissionLevel level = 3 [json_name = "level"];
}

// Request & Response messages for CRUD operations

// Create
message CreatePermissionRequest {
    Permission permission = 1;
}
message CreatePermissionResponse {
    Permission permission = 1;
}

// Read (Get single permission)
message GetPermissionRequest {
    string file_id = 1;
    string user_id = 2;
}
message GetPermissionResponse {
    Permission permission = 1;
}

// Read (List permissions for a file)
message ListPermissionsRequest {
    string file_id = 1;
}
message ListPermissionsResponse {
    repeated Permission permissions = 1;
}

// Update
message UpdatePermissionRequest {
    Permission permission = 1;
}
message UpdatePermissionResponse {
    Permission permission = 1;
}

// Delete
message DeletePermissionRequest {
    string file_id = 1;
    string user_id = 2;
}
message DeletePermissionResponse {
    bool success = 1;
}

// gRPC Service Definition
service PermissionService {
    rpc CreatePermission(CreatePermissionRequest) returns (CreatePermissionResponse) {
        option (google.api.http) = {
            post: "/permissions"
            body: "*"
        };
    }
    rpc GetPermission(GetPermissionRequest) returns (GetPermissionResponse) {
        option (google.api.http) = {
            get: "/permissions/{file_id}/{user_id}"
        };
    }
    rpc ListPermissions(ListPermissionsRequest) returns (ListPermissionsResponse) {
        option (google.api.http) = {
            get: "/permissions/{file_id}"
        };
    }
    rpc UpdatePermission(UpdatePermissionRequest) returns (UpdatePermissionResponse) {
        option (google.api.http) = {
            put: "/permissions/{permission.file_id}/{permission.user_id}"
            body: "*"
        };
    }
    rpc DeletePermission(DeletePermissionRequest) returns (DeletePermissionResponse) {
        option (google.api.http) = {
            delete: "/permissions/{file_id}/{user_id}"
        };
    }
}
